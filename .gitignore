# Define the state-space graph as a dictionary with states as keys and their neighbors and costs as values
graph = {
    'S': {'A': 2, 'B': 5},
    'A': {'C': 3, 'D': 2},
    'B': {'D': 5},
    'C': {'E': 5, 'F': 4},
    'D': {'E': 2},
    'E': {'F': 3},
    'F': {},
}

# Define the heuristic values for each state
heuristic = {
    'S': 10,
    'A': 8,
    'B': 9,
    'C': 7,
    'D': 4,
    'E': 3,
    'F': 0,
}

# A* Search function
def astar_search(graph, start, goal, heuristic):
    open_list = [(start, 0)]  # (state, cost)
    closed_set = set()
    g_scores = {state: float('inf') for state in graph}
    g_scores[start] = 0
    came_from = {}

    while open_list:
        current, current_cost = min(open_list, key=lambda x: x[1])
        open_list.remove((current, current_cost))

        if current == goal:
            path = [current]
            while current in came_from:
                current = came_from[current]
                path.append(current)
            path.reverse()
            return path

        closed_set.add(current)

        for neighbor, cost in graph[current].items():
            if neighbor in closed_set:
                continue

            tentative_g_score = g_scores[current] + cost

            if tentative_g_score < g_scores.get(neighbor, float('inf')):
                came_from[neighbor] = current
                g_scores[neighbor] = tentative_g_score
                f_score = tentative_g_score + heuristic[neighbor]
                open_list.append((neighbor, f_score))

    return None  # No path found

# Find the shortest path from 'S' to 'F' using A* Search
start_state = 'S'
goal_state = 'F'
path = astar_search(graph, start_state, goal_state, heuristic)
print("Shortest path from S to F using A* Search:", path)
