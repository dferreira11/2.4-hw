# Define the heuristic values for each state
heuristics = {
    'A': 7,
    'B': 5,
    'C': 3,
    'U': 4,
    'E': 2,
    'G': 3,
    'I': 6,
    'J': 4,
    'K': 1,
    'Y': 2,
    'M': 0
}

# Define the graph with state transitions
graph = {
    'A': ['B', 'C', 'U'],
    'B': ['E','G'],
    'C': ['G', 'I', 'J'],
    'U': ['K', 'Y'],
    'E': ['G', 'M'],
    'G': ['M'],
    'I': ['M'],
    'J': ['K'],
    'K': ['J'],
    'Y': ['M'],
    'M': []
}

# Initialize the current state to A
current_state = 'A'
path = [current_state]

# Traverse the graph until we reach the goal state M
while current_state != 'M':
    neighbors = graph[current_state]
    best_neighbor = None
    best_heuristic = float('inf')

    for neighbor in neighbors:
        if heuristics[neighbor] < best_heuristic:
            best_neighbor = neighbor
            best_heuristic = heuristics[neighbor]

    if best_neighbor is None:
        print("No path to the goal state M")
        break

    current_state = best_neighbor
    path.append(current_state)

# Print the path from A to M
print("Path from A to M:", ' -> '.join(path))
